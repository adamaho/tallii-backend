openapi: "3.0.0"
info:
  version: "0.2"
  title: Tallii API
paths:
  /api/v1/login:
    post:
      operationId: login,
      description: Logs a user in if the provided credentials are correct.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
      responses:
        200:
          description: The jwt token for the session of the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        400:
          description: The provided login credentials are not correct.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An internal server error has occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/signup:
    post:
      operationId: signup,
      description: Logs a user in if the provided credentials are correct.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupCredentials'
      responses:
        200:
          description: The jwt token for the session of the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        400:
          description: The provided invite code is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An internal server error has occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/invite-codes/{invite_code}:
    get:
      operationId: checkInviteCode,
      description: Checks if the provided invite code is valid and not taken.
      parameters:
        - name: invite_code
          in: path
          required: true
          description: The invite_code to check.
          schema:
            type: string
      responses:
        200:
          description: The provided invite_code is valid
        400:
          description: The provided invite code is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An internal server error has occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/users/{username}:
    get:
      operationId: getUser
      description: Gets a user with the user_id provided in the url.
      parameters:
        - name: username
          in: path
          required: true
          description: The username of the user to get.
          schema:
            type: string
      responses:
        200:
          description: The user that matches the provided user_id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        500:
          description: An internal server error has occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/users/check-email/{email}:
    get:
      operationId: checkEmail
      description: Checks if the provided email is taken.
      parameters:
        - name: email
          in: path
          required: true
          description: The email to check.
          schema:
            type: string
            format: email
      responses:
        200:
          description: The email is not taken.
        400:
          description: The email is taken.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An internal server error has occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/users/check-username/{username}:
    get:
      operationId: checkUsername
      description: Checks if the provided username is taken.
      parameters:
        - name: username
          in: path
          required: true
          description: The username to check.
          schema:
            type: string
      responses:
        200:
          description: The username is not taken.
        400:
          description: The username is taken.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: An internal server error has occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/friends:
    get:
      operationId: getFriendsOfUser
      description: Gets the friends matching the provided user_id and status.
      parameters:
        - name: user_id
          in: query
          required: true
          description: The user_id to get friends for.
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: The friends that match the provided query params.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Friend'
        500:
          description: An internal server error has occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/me:
    get:
      operationId: getMe
      description: Gets the profile of the currently logged in user
      responses:
        200:
          description: The profile of me
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Me'
        500:
          description: An internal server error has occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/me/friends:
    get:
      operationId: getFriendsOfMe
      description: Gets the friends matching the provided status for the currently logged in user.
      parameters:
        - name: status
          in: query
          required: false
          description: The status of the friendship.
          schema:
            type: string
            enum: [invited, requested, accepted, blocked]
      responses:
        200:
          description: The friends that match the provided query params.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Friend'
        500:
          description: An internal server error has occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      operationId: updateFriendsOfMe
      description: Sends, accepts, cancels, or denies a friend request given the provided query params.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FriendRequest'
      responses:
        200:
          description: The requested operation has completed.
        500:
          description: An internal server error has occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/me/events:
    get:
      operationId: getMyEvents
      description: Gets the events matching the provided status for the currently logged in user.
      parameters:
        - name: player_status
          in: query
          required: false
          description: The player status of the user in the event.
          schema:
            $ref: '#/components/schemas/PlayerStatus'
      responses:
        200:
          description: The friends that match the provided query params.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        500:
          description: An internal server error has occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/events:
    get:
      operationId: getUsersEvents
      description: Gets all events that match the provided query params.
      parameters:
        - name: user_id
          in: query
          required: true
          description: The user_id to get events for.
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: The events that match the provided query params.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        500:
          description: An internal server error has occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      operationId: createEvent
      description: Creates an event for the logged in user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEventRequest'
      responses:
        200:
          description: The event has been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEventResponse'
        500:
          description: An internal server error has occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /api/v1/events/{event_id}:
    get:
      operationId: getEvent
      description: Gets an event that matches the event_id in the url.
      parameters:
        - name: event_id
          in: path
          required: true
          description: The event_id to query for.
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: The event that matches the provided event_id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        500:
          description: An internal server error has occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/players:
    get:
      operationId: getPlayersInEvent
      description: Gets all of the players of a specfic event.
      parameters:
        - name: event_id
          in: query
          required: true
          description: The event_id to get the players for.
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: The players of the provided event_id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Player'
        500:
          description: An internal server error has occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/players/{player_id}:
    put:
      operationId: updatePlayer
      description: Updates the status of a specific player in an event.
      parameters:
        - name: player_id
          in: path
          required: true
          description: The player_id to update the status of.
          schema:
            type: integer
            format: int32
      requestBody:
        required: true
        description: The player update.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Player'
      responses:
        200:
          $ref: '#/components/schemas/UpdatePlayerResponse'
        500:
          description: An internal server error has occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/teams:
    get:
      operationId: getTeamsForEvent
      description: Gets all of the teams associated with an event
      parameters:
        - name: event_id
          in: query
          required: true
          description: The event_id to ge the teams for
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: The teams that are associated with the provided event.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
        500:
          description: An internal server error has occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: createTeam
      description: Creates a new team.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTeamRequest'
      responses:
        201:
          description: The team was successfully created.
        500:
          description: An internal server error has occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/teams/{team_id}/players:
    get:
      operationId: getPlayersForTeam
      description: Gets all of the players associated with the provided team_id.
      parameters:
        - name: team_id
          in: path
          required: true
          description: The team_id to get the players for.
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: The players that are on the provided team.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Player'
        500:
          description: An internal server error has occured.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UpdatePlayerResponse:
      description: The player has been updated.
  schemas:
    CreateEventRequest:
      description: A create event request.
      type: object
      required:
        - name
        - players
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        players:
          type: array
          items:
            type: integer
            format: int32

    CreateEventResponse:
      description: The response of a successfully created event.
      type: object
      required:
        - event_id
      properties:
        event_id:
          type: integer
          format: int32

    CreateTeamRequest:
      description: The request required to create a team
      type: object
      required:
        - event_id
        - name
        - players
      properties:
        event_id:
          type: integer
          format: int32
        name:
          type: string
        players:
          type: array
          items:
            type: integer
            format: int32

    Error:
      description: An error has occurred.
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string

    Event:
      description: An event.
      type: object
      required:
        - event_id
        - name
        - description
        - creator_user_id
        - created_at
      properties:
        event_id:
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
          nullable: true
        creator_user_id:
          type: integer
          format: int32
        created_at:
          type: string
          format: date-time

    Friend:
      description: A friend of the currently logged in user.
      type: object
      required:
        - user_id
        - username
        - avatar
        - taunt
        - created_at
      properties:
        user_id:
          type: integer
          format: int32
        username:
          type: string
        avatar:
          type: string
          nullable: true
        taunt:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time

    LoginCredentials:
      description: The body of the login request.
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    FriendRequest:
      description: The body of the friend post request.
      type: object
      required:
        - user_id
        - operation
      properties:
        user_id:
          type: integer
          format: int32
        operation:
          type: string
          enum:
            - send_request
            - accept_request
            - cancel_request
            - deny_request

    Player:
      description: The user that is a part of an event.
      type: object
      required:
        - player_id
        - event_id
        - user_id
        - username
        - avatar
        - taunt
        - status
        - created_at
      properties:
        player_id:
          type: integer
          format: int32
        event_id:
          type: integer
          format: int32
        user_id:
          type: integer
          format: int32
        username:
          type: string
        avatar:
          type: string
          nullable: true
        taunt:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/PlayerStatus'

    PlayerStatus:
      description: The status of the player in the event.
      type: string
      enum:
        - pending
        - declined
        - accepted

    SignupCredentials:
      description: The body of the signup request request.
      type: object
      required:
        - email
        - username
        - password
        - invite_code
      properties:
        email:
          type: string
          format: email
        username:
          type: string
        invite_code:
          type: string
        password:
          type: string
          format: password

    Team:
      description: A team that is part of an event.
      type: object
      required:
        - team_id
        - event_id
        - name
        - score
        - winner
        - created_at
      properties:
        team_id:
          type: integer
          format: int32
        event_id:
          type: integer
          format: int32
        name:
          type: string
        score:
          type: integer
          format: int32
        winner:
          type: boolean
        created_at:
          type: string
          format: date-time

    Token:
      description: A jwt token.
      type: object
      required:
        - token
      properties:
        token:
          type: string

    Me:
      description: A person that is logged in to tallii.
      type: object
      required:
        - user_id
        - avatar
        - email
        - invite_code
        - username
        - taunt
        - verified
      properties:
        user_id:
          type: integer
          format: int32
        avatar:
          type: string
          nullable: true
        email:
          type: string
          format: email
        invite_code:
          type: string
        username:
          type: string
        taunt:
          type: string
          nullable: true
        verified:
          type: boolean
          nullable: true

    User:
      description: A person that is logged in to tallii.
      type: object
      required:
        - user_id
        - avatar
        - username
        - taunt
      properties:
        user_id:
          type: integer
          format: int32
        avatar:
          type: string
          nullable: true
        username:
          type: string
        taunt:
          type: string
          nullable: true
